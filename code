import os
import sys
import requests
import uuid

sys.path.append("..")
from callback_logging import log_query_to_model, log_model_response
from dotenv import load_dotenv
from google.adk import Agent
from google.genai import types
from typing import Optional, List, Dict
from google.adk.tools.tool_context import ToolContext

load_dotenv()
model_name = os.getenv("MODEL")

# --- Core Tool: The MCP Client ---
# This single, powerful tool is the bridge to the entire Fi MCP server.
def call_mcp_tool(
    tool_context: ToolContext,
    tool_name: str,
    arguments: dict
) -> dict:
    """
    Acts as a client to call a tool on the remote MCP service.

    Args:
        tool_name (str): The name of the tool to call on the remote service
                         (e.g., 'login', 'fetch_bank_transactions').
        arguments (dict): The arguments to pass to the remote tool.

    Returns:
        A dictionary containing the response from the remote service.
    """
    url = "http://localhost:8080/mcp/stream"
    
   
    
    headers = {
            "Content-Type": "application/json",
            "Mcp-Session-Id": "mcp-session-594e48ea-fea1-40ef-8c52-7552dd9272af"
        }

    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "tools/call",
        "params": {"name": tool_name, "arguments": arguments}
    }

    try:
        print(f"--- Calling MCP client for remote tool: {tool_name} with args {arguments} ---")
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        
        # After a successful login, save the new session ID to the state.
        if tool_name == "login" and response.status_code == 200:
            result = response.json()
            if "result" in result and "mcp_session_id" in result["result"]:
                tool_context.state["mcp_session_id"] = result["result"]["mcp_session_id"]
        
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error calling MCP client: {e}")
        return {"error": "Could not connect to the MCP service.", "details": str(e)}

# --- Specialist Sub-Agents ---

data_analyst_agent = Agent(
    name="data_analyst",
    model=model_name,
    description="Fetches raw financial data from the MCP service. It does not interpret data.",
    instruction="""
        You are a data fetching agent. Your only job is to use the 'call_mcp_tool'
        to get financial data from the MCP server. Do not analyze or comment on the data,
        simply return the raw results from the tool call.
        """,
    tools=[call_mcp_tool]
)

financial_insights_agent = Agent(
    name="financial_insights_agent",
    model=model_name,
    description="Analyzes financial data to provide insights on spending and savings.",
    instruction="""
        You are a financial analyst. You will be given raw financial data
        (like bank transactions or net worth details). Your job is to:
        1. Analyze the data to find meaningful patterns (e.g., high spending categories, savings rate).
        2. Summarize the findings in a clear, easy-to-understand way.
        3. Present these insights to the user.
        You do not have tools to fetch data yourself.
        """,
)

investment_advisor_agent = Agent(
    name="investment_advisor_agent",
    model=model_name,
    description="Provides investment advice based on a user's financial profile.",
    instruction="""
        You are an investment advisor. You will be given a user's financial profile,
        including their net worth, existing investments, and savings habits. Your job is to:
        1. Evaluate their current investment portfolio (e.g., asset allocation, performance).
        2. Provide personalized, actionable investment suggestions based on their profile.
        3. Explain the reasoning behind your suggestions.
        You do not have access to real-time market data or tools to fetch data.
        """,
)


# --- Root Agent: The Financial Advisor ---

root_agent = Agent(
    name="financial_advisor",
    model=model_name,
    description="The main financial advisor that interacts with the user and delegates tasks.",
    instruction="""
        You are a friendly and professional AI Personal Financial Advisor.
        
        1. **Login:** Start by asking the user for their 10-digit phone number to log in.
           Use the 'data_analyst' agent to call the 'login' tool with the phone number.
           The 'data_analyst' will automatically handle saving the session ID.
           Confirm to the user that they are logged in.

        2. **Understand Goal:** Ask the user what they'd like to do (e.g., "analyze my spending,"
           "check my net worth," "get investment advice").

        3. **Delegate Tasks:**
           - To get any data, ALWAYS delegate to the 'data_analyst' agent first.
           - For spending analysis, give the data from the 'data_analyst' to the 'financial_insights_agent'.
           - For investment advice, give the data from the 'data_analyst' to the 'investment_advisor_agent'.
           - Present the final analysis from the specialist agents to the user.
        """,
    generate_content_config=types.GenerateContentConfig(
        temperature=0,
    ),
    sub_agents=[data_analyst_agent, financial_insights_agent, investment_advisor_agent]
)
